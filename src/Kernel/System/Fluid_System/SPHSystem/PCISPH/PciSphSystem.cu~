#include <PciSphSystem.cuh>
#include <stdio.h>

extern "C"
{
/****************************************************************************************************************************/
/****************************************************************************************************************************/
void pci_SPH_update(double* oldPos, double* pos, double* vel, double* velInterAv, double* velInterAp, 
		    double* restore_oldPos, double* restore_pos, double* restore_velInterAv, double* restore_velInterAp,
		    double* mass, double* radius, double* density, double* restDensity, double* densityError, double* pressure,
		    double* k, double* viscosity, double* l, double* surfaceTension, double threshold, partVoisine voisines,
		    double* normales, double* forcesViscosity, double* forcesSurface, double* forcesPressure, double* forcesAccum,
		    float dt, uint nbBodies)
{
    int numThreadsX, numBlocksX;
    computeGridSize(nbBodies,numBlocksX, numThreadsX);
  
    compute_Density_PCI<<<numBlocksX,numThreadsX>>>(nbBodies, (double3*) pos, mass, radius, density, restDensity, densityError, voisines);
 
    compute_Viscosity_SurfaceTension_Force_PCI<<<numBlocksX,numThreadsX>>>(nbBodies, (double3*) pos, (double3*) vel, mass, density,  
			       	 pressure, radius, viscosity, l, surfaceTension, 
			         (double3*) normales, (double3*) forcesPressure, (double3*) forcesViscosity, (double3*) forcesSurface, 
			         (double3*) forcesAccum, voisines);
    uint nbIter = 0;

    float *dt_CFL;
    cudaMalloc((void**)&dt_CFL,sizeof(float));
    cudaMemcpy(dt_CFL,&dt,sizeof(float),cudaMemcpyHostToDevice);

    while(nbIter < 3) {

	// On restaure la pos et la vitesse 
        restore_Pos_Vel_PCI<<<numBlocksX,numThreadsX>>>((double3*) restore_velInterAv, (double3*) restore_velInterAp, 
			    (double3*) restore_oldPos, (double3*) restore_pos,
			    (double3*) velInterAv, (double3*) velInterAp, (double3*) oldPos, (double3*) pos, nbBodies);
        cudaDeviceSynchronize();

	// On calcul les positions et vitesses "intermédiaires" 
	integrateSPH_LeapFrog_Forces<<<numBlocksX,numThreadsX>>>((double3*) velInterAv, (double3*) velInterAp, (double3*) oldPos, (double3*) pos, 
				    (double3*) forcesViscosity, (double3*) forcesSurface, (double3*) forcesPressure, (double3*) forcesAccum,
				    density, dt, nbBodies);
        cudaDeviceSynchronize();

	// On calcul la nouvelle densité et la différence entre cette densité et la densité au repos
	compute_Density_PCI<<<numBlocksX,numThreadsX>>>(nbBodies, (double3*) pos, mass, radius, density, restDensity, densityError, voisines);
	cudaDeviceSynchronize();

	// On calcul la pression (si l'erreur commise sur la densité est inférieur à un certain pourcentage)
        compute_Pressure_PCI<<<numBlocksX,numThreadsX>>>(nbBodies, (double3*) pos, mass, radius, k, threshold, 
		             				 density, restDensity, densityError, pressure, voisines, dt);
	cudaDeviceSynchronize();

	// On calcul la force de pression (si l'erreur commise sur la densité est inférieur à un certain pourcentage)
	compute_Pressure_Force_PCI<<<numBlocksX,numThreadsX>>>(nbBodies, (double3*) pos, mass, 
				     density, restDensity, densityError, pressure, radius, 
				    (double3*) forcesPressure, threshold, voisines);
        cudaDeviceSynchronize();

	
	nbIter++;
    }
    // On calcul les positions et vitesses "intermédiaires" 
    integrateSPH_LeapFrog_Forces<<<numBlocksX,numThreadsX>>>((double3*) velInterAv, (double3*) velInterAp, (double3*) oldPos, (double3*) pos, 
				    (double3*) forcesViscosity, (double3*) forcesSurface, (double3*) forcesPressure, (double3*) forcesAccum,
				    density, dt, nbBodies);
    cudaDeviceSynchronize();
    cudaFree(dt_CFL);
}

}
