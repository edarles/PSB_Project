#ifndef _OBJECT_COLLISION_
#define _OBJECT_COLLISION_

#include <vector>
#include <assert.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <Vector3.h>
using namespace std;
/***********************************************************************************************/
/***********************************************************************************************/
class ObjectCollision {

/***********************************************************************************************/
	public:
		ObjectCollision();
		ObjectCollision(float elast, float friction, bool is_container);
		ObjectCollision(const ObjectCollision&);
		~ObjectCollision();

/***********************************************************************************************/
/***********************************************************************************************/
		float 	     getElast();
		float 	     getFriction();
		bool	     getIsContainer();

/***********************************************************************************************/
/***********************************************************************************************/
		void	     setElast(float);
		void	     setFriction(float);
		void	     setIsContainer(bool);

/***********************************************************************************************/
/***********************************************************************************************/		
		virtual      void collide(double* oldPos, double* newPos, double* oldVel, double* newVel, float radiusParticle, 
					  float dt, int nbBodiesP) = 0;

/***********************************************************************************************/
/***********************************************************************************************/
		virtual void display(GLenum, GLenum, Vector3 color) = 0;
		virtual void displayNormales(Vector3 color) = 0;

/***********************************************************************************************/
	protected:
/***********************************************************************************************/
    		float elast;
    		float friction;
		bool  is_container;
/***********************************************************************************************/
};
/***********************************************************************************************/
/***********************************************************************************************/
#endif
/***********************************************************************************************/
/***********************************************************************************************/
