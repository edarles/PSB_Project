#include <Mesh.h>

/**********************************************************************************/
/**********************************************************************************/
namespace Utils
{
/**********************************************************************************/
/**********************************************************************************/
Mesh::Mesh():ObjectGeo()
{
}
/**********************************************************************************/
Mesh::Mesh(char* filename, vector<Triangle> faces):ObjectGeo()
{
	this->filename = filename;
	this->faces.clear();
	for(unsigned int i=0;i<faces.size();i++)
		this->faces.push_back(faces[i]);
}
/**********************************************************************************/
Mesh::Mesh(const Mesh& M):ObjectGeo()
{
	this->filename = M.filename;
	this->faces.clear();
	for(unsigned int i=0;i<M.faces.size();i++)
		this->faces.push_back(M.faces[i]);
}
/**********************************************************************************/
Mesh::~Mesh()
{
	this->faces.clear();
}
/**********************************************************************************/
/**********************************************************************************/
char*	Mesh::getFilename()
{
	return filename;
}
/**********************************************************************************/
vector<Triangle> Mesh::getFaces()
{
	return faces;
}
/**********************************************************************************/
Triangle Mesh::getFace(unsigned int i)
{
	assert(i<faces.size());
	return faces[i];
}
/**********************************************************************************/
unsigned int Mesh::getNbFaces()
{
	return faces.size();
}
/**********************************************************************************/
/**********************************************************************************/
void Mesh::setFilename(char* filename)
{
	this->filename = filename;
}
/**********************************************************************************/
void Mesh::setFaces(vector<Triangle> faces)
{
	this->faces.clear();
	for(unsigned int i=0;i<faces.size();i++)
		this->faces.push_back(faces[i]);
}
/**********************************************************************************/
void  Mesh::setFace(unsigned int i, Triangle  T)
{
	assert(i<faces.size());
	this->faces[i] = T;
}
/**********************************************************************************/
void  Mesh::addFace(Triangle T)
{
	this->faces.push_back(T);
}
/**********************************************************************************/
/**********************************************************************************/
void  Mesh::inverseNormales()
{
	for(unsigned int i=0;i<faces.size();i++)
		faces[i].inverseNormale();
}
/**********************************************************************************/
/**********************************************************************************/
void  Mesh::display(Vector3 color)
{
	for(unsigned int i=0;i<faces.size();i++)
		faces[i].display(color);
}
/**********************************************************************************/	
void  Mesh::displayNormale(Vector3 color)
{
	for(unsigned int i=0;i<faces.size();i++)
		faces[i].displayNormale(color);
}
/**********************************************************************************/
/**********************************************************************************/

/**********************************************************************************/
/**********************************************************************************/
}
